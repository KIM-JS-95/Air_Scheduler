
# 국가 정보(Nation_Code) 획득 로직 개선

```
날짜: 2024년 5월 31일
```

## 목표
`Schedule` 엔티티와 `Nation_code` 엔티티 간의 `Country-Code` 매핑 과정에서 시간 복잡도를 개선하여 성능을 최적화하는 것을 목표로 합니다.

## 기존 로직
기존에는 `Nation_code`의 모든 데이터를 `findAll()`을 통해 호출한 뒤, 이를 `Schedule` 엔티티와 매핑했습니다. 데이터가 많아질수록 처리 시간에 지연이 발생하는 문제가 있었습니다.

### 시간 복잡도 분석
`ScheduleService.java` > `getTodaySchedules()` 함수

- `Schedule` 컬럼 호출: 1회
- `Nation_code` 컬럼 호출: 30회
- `convertToMap()` 함수 복잡도: O(30)
- `generateFlightData()` 함수 복잡도: O(1 * 30)

**총 시간 복잡도: O(1 * 30)**

## 개선된 로직
불필요한 데이터 호출을 줄이기 위해 **JPA 쿼리를 개선**했습니다.

### 변경된 쿼리
1. 기존: `findAll()` -> `SELECT * FROM Nation_code`
2. 개선: `findByCountryIn` -> `SELECT * FROM Nation_code WHERE country IN ('CNT', 'CJU')`

### 개선된 시간 복잡도 분석
- `Schedule` 컬럼 호출: 1회
- `Nation_code` 컬럼 호출: 2회
- `convertToMap()` 함수 복잡도: O(2)
- `generateFlightData()` 함수 복잡도: O(1 * 2)

**총 시간 복잡도: O(1 * 2)**

## 코드 변경 사항
```java
public class ScheduleService {

    // 개선된 NationCode 조회 로직
    public Map<String, Map<String, String>> getNationCode() {
        List<NationCode> codes = nationCodeRepository.findByCountryIn(List<String> country); // 개선된 쿼리 사용
        return convertToMap(codes);
    }

    // NationCode를 Map 형태로 변환
    public Map<String, Map<String, String>> convertToMap(List<NationCode> nationCodes) {
        Map<String, Map<String, String>> codeCountryMap = new HashMap<>();

        for (NationCode nationCode : nationCodes) {
            Map<String, String> metadata = new HashMap<>();
            metadata.put("code", nationCode.getCode());
            metadata.put("lat", nationCode.getLat());
            metadata.put("lon", nationCode.getLon());
            codeCountryMap.put(nationCode.getCountry(), metadata);
        }

        return codeCountryMap;
    }

    // FlightData 생성
    public List<FlightData> generateFlightData(List<Schedule> sList, Map<String, Map<String, String>> codes) {
        List<FlightData> flightDataList = new ArrayList<>();

        for (Schedule s : sList) {
            FlightData flightData = FlightData.builder()
                .departureShort(s.getCntfrom())
                .departure(codes.getOrDefault(s.getCntfrom(), Collections.emptyMap()).getOrDefault("code", "Unknown"))
                .date(s.getDate())
                .destinationShort(s.getCntto())
                .destination(codes.getOrDefault(s.getCntto(), Collections.emptyMap()).getOrDefault("code", "Unknown"))
                .flightNumber(s.getPairing())
                .stal(s.getStal())
                .stab(s.getStab())
                .stdl(s.getStdl())
                .stdb(s.getStdb())
                .activity(s.getActivity())
                .id(s.getId())
                .ci(s.getCi())
                .co(s.getCo())
                .lat(codes.getOrDefault(s.getCntto(), Collections.emptyMap()).getOrDefault("lat", "unknown"))
                .lon(codes.getOrDefault(s.getCntto(), Collections.emptyMap()).getOrDefault("lon", "unknown"))
                .build();
            
            flightDataList.add(flightData);
        }

        return flightDataList;
    }
}
```

이 개선된 로직은 데이터 호출을 최소화하여 성능을 크게 향상시킬 수 있습니다.